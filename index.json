[{"authors":["admin"],"categories":null,"content":"I am a 4th year PhD Student at the Embedded and Networked Systems group at the Delft University of Technology (TU Delft). My supervisors are Dr. Przemysław Pawełczak and Prof. dr. Koen Langendoen.\nMy research focuses on intermittent computing support, and this mainly involves ensuring that low-power battery-less embedded systems–that work on harvested energy–continue where they left off after a total power failure. I am affiliated with the ZERO program, whose focus is to reduce the energy consumed by IoT devices drastically.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"I am a 4th year PhD Student at the Embedded and Networked Systems group at the Delft University of Technology (TU Delft). My supervisors are Dr. Przemysław Pawełczak and Prof. dr. Koen Langendoen.\nMy research focuses on intermittent computing support, and this mainly involves ensuring that low-power battery-less embedded systems–that work on harvested energy–continue where they left off after a total power failure. I am affiliated with the ZERO program, whose focus is to reduce the energy consumed by IoT devices drastically.","tags":null,"title":"Vito Kortbeek","type":"authors"},{"authors":["Vito Kortbeek","Souradip Ghosh","Josiah Hester","Simone Campanoni","Przemysław Pawełczak"],"categories":null,"content":"GitHub Repository: https://github.com/TUDSSL/WARio\n","date":1655683200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1655683200,"objectID":"aa5d6099dabbd5fc238361901c5f4923","permalink":"/publication/wario/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/wario/","section":"publication","summary":"Intermittently-operating embedded computing platforms powered by energy harvesting require software frameworks to protect from errors caused by Write After Read (WAR) dependencies. A powerful method of code protection for systems with non-volatile main memory utilizes compiler analysis to insert a checkpoint inside each WAR violation in the code. However, such software frameworks are oblivious to the code structure—and therefore, inefficient—when many consecutive WAR violations exist. Our insight is that by transforming the input code, i.e., moving individual write operations from unique WARs close to each other, we can significantly reduce the number of checkpoints. This idea is the foundation for WARio: a set of compiler transformations for efficient code generation for intermittent computing. WARio, on average, reduces checkpoint overhead by 58% and up to 88% compared to the state of the art across various benchmarks.","tags":["Intermittent Computing","Compiler optimizations"],"title":"[PLDI '22] WARio: Efficient Code Generation for Intermittent Computing","type":"publication"},{"authors":["Vito Kortbeek","Abu Bakar","Stefany Cruz","Kasım Sinan Yıldırım","Przemysław Pawełczak","Josiah Hester"],"categories":null,"content":"GitHub Repository: https://github.com/TUDSSL/BFree (under construction)\n","date":1608422400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1608422400,"objectID":"20ad90386d7d03f0eb9339672f40d17a","permalink":"/publication/bfree/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/bfree/","section":"publication","summary":"Building and programming tiny battery-free energy harvesting embedded computer systems is hard for the average maker because of the lack of tools, hard to comprehend programming models, and frequent power failures. With the high ecologic cost of equipping the next trillion embedded devices with batteries, it is critical to equip the makers, hobbyists, and novice embedded systems programmers with easy-to-use tools supporting battery-free energy harvesting application development. This way, makers can create untethered embedded systems that are not plugged into the wall, the desktop, or even a battery, providing numerous new applications and allowing for a more sustainable vision of ubiquitous computing. In this paper, we present BFree, a system that makes it possible for makers, hobbyists, and novice embedded programmers to develop battery-free applications using Python programming language and widely available hobbyist maker platforms. BFree provides energy harvesting hardware and a power failure resilient version of Python, with durable libraries that enable common coding practice and off the shelf sensors. We develop demonstration applications, benchmark BFree against battery-powered approaches, and evaluate our system in a user study. This work enables makers to engage with a future of ubiquitous computing that is useful, long-term, and environmentally responsible.","tags":["Intermittent Computing"],"title":"[IMWUT Dec. '20] BFree: Enabling Battery-free Sensor Prototyping with Python","type":"publication"},{"authors":["Jasper de Winkel","Vito Kortbeek","Josiah Hester","Przemysław Pawełczak"],"categories":null,"content":"GitHub Repository: https://github.com/TUDSSL/ENGAGE\n","date":1600560000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1600560000,"objectID":"75457816728efe508a63323e48733a1f","permalink":"/publication/gameboy/","publishdate":"2020-09-01T00:00:00Z","relpermalink":"/publication/gameboy/","section":"publication","summary":"We present ENGAGE, the first battery-free, personal mobile gaming device powered by energy harvested from the gamer actions and sunlight. Our design implements a power failure resilient Nintendo Game Boy emulator that can run off-the-shelf classic Game Boy games like Tetris or Super Mario Land. This emulator is capable of intermittent operation by tracking memory usage, avoiding the need for always checkpointing all volatile memory, and decouples the game loop from user interface mechanics allowing for restoration after power failure. We build custom hardware that harvests energy from gamer button presses and sunlight, and leverages a mixed volatility memory architecture for efficient intermittent emulation of game binaries. Beyond a fun toy, our design represents the first battery-free system design for continuous user attention despite frequent power failures caused by intermittent energy harvesting. We tackle key challenges in intermittent computing for interaction including seamless displays and dynamic incentive-based gameplay for energy harvesting. This work provides a reference implementation and framework for a future of battery-free mobile gaming in a more sustainable Internet of Things.","tags":["Intermittent Computing"],"title":"[IMWUT Sept./UbiComp '20] Battery-Free Game Boy","type":"publication"},{"authors":["Vito Kortbeek","Kasım Sinan Yıldırım","Abu Bakar","Jacob Sorber","Josiah Hester","Przemysław Pawełczak"],"categories":null,"content":"GitHub Repository: https://github.com/TUDSSL/TICS\n","date":1584662400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1584662400,"objectID":"743b46360f78a4f1a091c342ccad9e83","permalink":"/publication/tics/","publishdate":"2019-01-01T00:00:00Z","relpermalink":"/publication/tics/","section":"publication","summary":"Tiny energy harvesting sensors that operate intermittently, without batteries, have become an increasingly appealing way to gather data in hard to reach places at low cost. Frequent power failures make forward progress, data preservation and consistency, and timely operation challenging. Unfortunately, state-of-the-art systems ask the programmer to solve these challenges, and have high memory overhead, lack critical programming features like pointers and recursion, and are only dimly aware of the passing of time and its effect on application quality. We present Time-sensitive Intermittent Computing System (TICS), a new platform for intermittent computing, which provides simple programming abstractions for handling the passing of time through intermittent failures, and uses this to make decisions about when data can be used or thrown away. Moreover, TICS provides predictable checkpoint sizes by keeping checkpoint and restore times small and reduces the cognitive burden of rewriting embedded code for intermittency without limiting expressibility or language functionality, enabling numerous existing embedded applications to run intermittently.","tags":["Intermittent Computing"],"title":"[ASPLOS '20] Time-sensitive Intermittent Computing Meets Legacy Software","type":"publication"}]